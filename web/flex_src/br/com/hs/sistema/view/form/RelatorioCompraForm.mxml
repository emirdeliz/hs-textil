<?xml version="1.0" encoding="utf-8"?>
<ns1:FieldSet xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:ns1="com.jwopitz.containers.*" title="Relatório Compras" 
	 verticalScrollPolicy="off" dropShadowEnabled="true" dropShadowColor="#EAE5E5" shadowDistance="100" shadowDirection="right" fontThickness="100" xmlns:component="br.com.hs.sistema.view.component.*">
	<mx:Form width="100%">
		<component:FormItemCustom label="Fornecedor:" direction="horizontal">	
			<component:TextInputCustom styleName="small" id="txtIdFornecedor" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtFornecedor" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtOidFornecedor" visible="false" includeInLayout="false"/>
			<mx:Button styleName="btZoom" click="abrirZoomFornecedor()"/>
			<mx:Button styleName="btLimpar" click="{Utils.limpaCampos([txtIdFornecedor, txtFornecedor, txtOidFornecedor]);}"/>
		</component:FormItemCustom>
		<component:FormItemCustom label="Funcionario:" direction="horizontal">	
			<component:TextInputCustom styleName="small" id="txtIdFuncionario" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtFuncionario" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtOidFuncionario" visible="false" includeInLayout="false"/>
			<mx:Button styleName="btZoom" click="abrirZoomFuncionario()"/>
			<mx:Button styleName="btLimpar" click="{Utils.limpaCampos([txtIdFuncionario, txtFuncionario, txtOidFuncionario]);}"/>
		</component:FormItemCustom>
		<component:FormItemCustom label="Forma Pagamento:" direction="horizontal">	
			<component:TextInputCustom styleName="small" id="txtIdFormaPagamento" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtFormaPagamento" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtOidFormaPagamento" visible="false" includeInLayout="false"/>
			<mx:Button styleName="btZoom" click="abrirZoomFormaPagamento()"/>
			<mx:Button styleName="btLimpar" click="{Utils.limpaCampos([txtIdFormaPagamento, txtFormaPagamento, txtOidFormaPagamento]);}"/>
		</component:FormItemCustom>
		<mx:HBox verticalAlign="middle" width="100%">			
			<mx:FormItem label="      Data realização:" direction="horizontal">
				<mx:DateField id="txtDataI" formatString="DD/MM/YYYY"/>		
			</mx:FormItem>
			<mx:FormItem label="à" direction="horizontal">		
				<mx:DateField id="txtDataF" formatString="DD/MM/YYYY"/>
			</mx:FormItem>	
			<mx:Button click="geraRelatorio()" styleName="btFiltrar"/>		
		</mx:HBox>			
	</mx:Form>
	<mx:HBox horizontalAlign="center" width="100%">
		<mx:Label text="Número compras: 0 " fontWeight="bold" id="lblNumeroCompras" fontSize="18" textDecoration="underline"/>
		<mx:Label text="Valor total: 0,00" fontWeight="bold" fontSize="18" id="lblValorTotal" textDecoration="underline"/>
		<mx:Label text="Custo médio: 0,00" fontWeight="bold" fontSize="18" id="lblCustoMedio" textDecoration="underline"/>
	</mx:HBox>
	<mx:FormItem label="Pesquisar:" width="100%" direction="horizontal">		
		<mx:TextInput id="inputSearch" width="100%" change="{filtraDados()}"/>		
	</mx:FormItem>
	<mx:DataGrid id="grid" width="100%" height="100%" doubleClick="{this.grid.selectedItem!=null? abrirFormManutencao(grid.selectedItem, true): '';}" doubleClickEnabled="true" variableRowHeight="true">
		<mx:columns>
			<mx:DataGridColumn headerText="Data" labelFunction="labelFunctionData" wordWrap="true" width="2"/>
			<mx:DataGridColumn headerText="Fornecedor" dataField="compra.fornecedor.nome" wordWrap="true" width="6"/>		
			<mx:DataGridColumn headerText="Valor" labelFunction="labelFunctionValor" wordWrap="true" width="2"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:Script>
		<![CDATA[
			import br.com.hs.model.entity.Caixa;
			import br.com.hs.sistema.view.zoom.ZoomFuncionario;
			import br.com.hs.sistema.view.zoom.ZoomFornecedor;
			import br.com.hs.sistema.view.zoom.ZoomFormaPagamento;
			import br.com.hs.model.entity.Funcionario;
			import br.com.hs.model.entity.FormaPagamento;
			import br.com.hs.model.entity.Fornecedor;
			import br.com.hs.model.entity.ProdutoVenda;
			import br.com.hs.model.entity.Produto;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			import br.com.hs.model.entity.MaterialCompra;
			import br.com.hs.model.entity.Material;			
			import br.com.hs.sistema.view.utils.Utils;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import br.com.hs.model.remote.ServiceLocator;				
			import mx.collections.ArrayCollection;
			import mx.rpc.AbstractOperation;
			import mx.rpc.events.ResultEvent;			
			import mx.rpc.remoting.mxml.RemoteObject;			
							
			private function geraRelatorio():void{
				var remoteObject:RemoteObject = ServiceLocator.getCompraService();					
				var operation:AbstractOperation = remoteObject.getOperation("geraRelatorio");				
				operation.addEventListener(ResultEvent.RESULT, onResultBuscarTodos);
				
				var fornecedor:Fornecedor = null;
				var funcionario:Funcionario = null;
				var formaPagamento:FormaPagamento;
				
				if(txtOidFornecedor.text!=''){
					fornecedor = new Fornecedor();
					fornecedor.oid = new Number(txtOidFornecedor.text);
				}
				if(txtOidFuncionario.text!=''){
					funcionario = new Funcionario();
					funcionario.oid = new Number(txtOidFuncionario.text);
				}
				if(txtOidFormaPagamento.text!=''){
					formaPagamento = new FormaPagamento();
					formaPagamento.oid = new Number(txtOidFormaPagamento.text);
				}						
				remoteObject.geraRelatorio(fornecedor, funcionario, formaPagamento, txtDataI.selectedDate, txtDataF.selectedDate);				
			}
			
			private function onResultBuscarTodos(event:ResultEvent):void{
				this.grid.dataProvider = event.result as ArrayCollection;			
				this.atualizaDadosInformativos();									
			}
						
			private function abrirFormManutencao(item:Object, leitura:Boolean):void{						
				var frm:CompraForm = new CompraForm();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);
				frm.entidade = item;					
				frm.formLeitura = leitura;		
				frm.callback = null;					
			}			
			
			private function filterSearch(item:Object):Boolean {
				var isMatch:Boolean = false;				
			
				if(item.compra.fornecedor.nome != null && item.compra.fornecedor.nome.toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}			
				if(item.dataCaixa != null && Utils.formatDat(item.dataCaixa).toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}    
				if(item.valor != null && item.valor.toString().toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1 ||
					Utils.formatDec(item.valor.toString()).toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}                     
				return isMatch;
			}
			
			private function filtraDados():void {
				if(this.grid.dataProvider==null)
					return;				
				this.grid.dataProvider.filterFunction = this.filterSearch; 
				this.grid.dataProvider.refresh();
				this.atualizaDadosInformativos();	
			}
			
			private function labelFunctionData(row:Object, column:DataGridColumn):String{			
				var vFormat:String = Utils.formatDat(row.dataCaixa);						
            	return vFormat;
			}	
			
			private function labelFunctionValor(row:Object, column:DataGridColumn):String{			
				var vFormat:String = Utils.formatDec(row.valor);						
            	return vFormat;
			}
						
			private function abrirZoomFornecedor():void{
				var frm:ZoomFornecedor = new ZoomFornecedor();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);					
			    frm.callback = selecionaFornecedor;						
			}
			
			private function selecionaFornecedor(c:Fornecedor):void{
				txtIdFornecedor.text = c.id;
				txtFornecedor.text = c.nome;
				txtOidFornecedor.text = c.oid.toString();				
			}
			
			private function abrirZoomFormaPagamento():void{
				var frm:ZoomFormaPagamento = new ZoomFormaPagamento();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);					
			    frm.callback = selecionaFormaPagamento;						
			}
			
			private function selecionaFormaPagamento(f:FormaPagamento):void{
				txtIdFormaPagamento.text = f.id;
				txtFormaPagamento.text = f.nome;
				txtOidFormaPagamento.text = f.oid.toString();			
			}	
			
			private function abrirZoomFuncionario():void{
				var frm:ZoomFuncionario = new ZoomFuncionario();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);					
			    frm.callback = selecionaFuncionario;						
			}
			
			private function selecionaFuncionario(r:Funcionario):void{
				txtIdFuncionario.text = r.id;
				txtFuncionario.text = r.nome;
				txtOidFuncionario.text = r.oid.toString();			
			}
			
			private function atualizaDadosInformativos():void{
				if(this.grid.dataProvider==null){
					this.lblNumeroCompras.text = 'Número de compras: 0';
					this.lblValorTotal.text = 'Valor total: 0,00';
					this.lblCustoMedio.text = 'Custo médio: 0,00';
					return;
				}				
					
				var vlTotal:Number = 0;
				var nrItens:Number = this.grid.dataProvider.length;
				
				for each(var c:Caixa in this.grid.dataProvider){
					vlTotal += c.valor;
				}
				
				var custoMedio:Number = vlTotal/nrItens;			
				
				this.lblNumeroCompras.text = 'Número de compras: ' + nrItens;
				this.lblValorTotal.text = 'Valor total: ' + Utils.formatDec(String(vlTotal));
				this.lblCustoMedio.text = 'Custo médio: ' + (isNaN(custoMedio)?'0,00':Utils.formatDec(String(custoMedio)));
				
			}					
		]]>
	</mx:Script>
</ns1:FieldSet>
