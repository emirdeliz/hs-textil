<?xml version="1.0" encoding="utf-8"?>
<ns1:FieldSet xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:ns1="com.jwopitz.containers.*" 
	verticalScrollPolicy="off" title="Relatório Produtos" dropShadowEnabled="true" dropShadowColor="#EAE5E5" shadowDistance="100" shadowDirection="right" fontThickness="100" xmlns:component="br.com.hs.sistema.view.component.*">
	<mx:Form width="100%">
		<component:FormItemCustom label="Produto:" direction="horizontal">	
			<component:TextInputCustom styleName="small" id="txtIdProduto" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtProduto" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtOidProduto" visible="false" includeInLayout="false"/>
			<mx:Button styleName="btZoom" click="abrirZoomProduto()"/>
			<mx:Button styleName="btLimpar" click="{Utils.limpaCampos([txtIdProduto, txtProduto, txtOidProduto]);}"/>			
		</component:FormItemCustom>				
		<mx:HBox verticalAlign="middle" width="100%">			
			<mx:FormItem label="Intervalo última venda:" direction="horizontal">
				<mx:DateField id="txtDataI" formatString="DD/MM/YYYY"/>		
			</mx:FormItem>
			<mx:FormItem label="à" direction="horizontal">		
				<mx:DateField id="txtDataF" formatString="DD/MM/YYYY"/>
			</mx:FormItem>	
			<mx:Button click="geraRelatorio()" styleName="btFiltrar"/>		
		</mx:HBox>	
	</mx:Form>
	<mx:FormItem label="Pesquisar:" width="100%" direction="horizontal">		
		<mx:TextInput id="inputSearch" width="100%" change="{filtraDados()}"/>		
	</mx:FormItem>
	<mx:DataGrid id="grid" width="100%" height="100%" doubleClick="{this.grid.selectedItem!=null? abrirFormManutencao(grid.selectedItem, true): '';}" doubleClickEnabled="true" variableRowHeight="true">
		<mx:columns>
			<mx:DataGridColumn headerText="Cod." dataField="id" wordWrap="true" width="2"/>
			<mx:DataGridColumn headerText="Nome" dataField="nome" wordWrap="true" width="6"/>
			<mx:DataGridColumn headerText="Última venda" labelFunction="labelFunctionData" wordWrap="true" width="2"/>						
		</mx:columns>
	</mx:DataGrid>
	<mx:Script>
		<![CDATA[
			import br.com.hs.sistema.view.zoom.ZoomRepresentante;
			import br.com.hs.sistema.view.zoom.ZoomProduto;
			import br.com.hs.sistema.view.zoom.ZoomFormaPagamento;
			import br.com.hs.model.entity.Representante;
			import br.com.hs.model.entity.FormaPagamento;
			import br.com.hs.model.entity.Produto;
			import br.com.hs.model.entity.ProdutoVenda;
			import br.com.hs.model.entity.Produto;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			import br.com.hs.model.entity.MaterialCompra;
			import br.com.hs.model.entity.Material;			
			import br.com.hs.sistema.view.utils.Utils;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import br.com.hs.model.remote.ServiceLocator;				
			import mx.collections.ArrayCollection;
			import mx.rpc.AbstractOperation;
			import mx.rpc.events.ResultEvent;			
			import mx.rpc.remoting.mxml.RemoteObject;			
							
			private function geraRelatorio():void{
				var remoteObject:RemoteObject = ServiceLocator.getProdutoService();					
				var operation:AbstractOperation = remoteObject.getOperation("geraRelatorio");				
				operation.addEventListener(ResultEvent.RESULT, onResultBuscarTodos);
				
				var produto:Produto = null;
								
				if(txtOidProduto.text!=''){
					produto = new Produto();
					produto.oid = new Number(txtOidProduto.text);
				}
									
				remoteObject.geraRelatorio(produto, txtDataI.selectedDate, txtDataF.selectedDate);				
			}
			
			private function onResultBuscarTodos(event:ResultEvent):void{
				this.grid.dataProvider = event.result as ArrayCollection;														
			}
						
			private function abrirFormManutencao(item:Object, leitura:Boolean):void{						
				var frm:ProdutoForm = new ProdutoForm();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);
				frm.entidade = item;					
				frm.formLeitura = leitura;		
				frm.callback = null;					
			}			
			
			private function filterSearch(item:Object):Boolean {
				var isMatch:Boolean = false;				
			
				if(item.nome != null && item.nome.toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}			
				if(item.ultimaVenda != null && Utils.formatDat(item.ultimaVenda).toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}   				                    
				return isMatch;
			}
			
			private function filtraDados():void {
				if(this.grid.dataProvider==null)
					return;				
				this.grid.dataProvider.filterFunction = this.filterSearch; 
				this.grid.dataProvider.refresh();			
			}
			
			private function labelFunctionData(row:Object, column:DataGridColumn):String{			
				var vFormat:String = Utils.formatDat(row.ultimaVenda);						
            	return vFormat;
			}	
						
			private function abrirZoomProduto():void{
				var frm:ZoomProduto = new ZoomProduto();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);					
			    frm.callback = selecionaProduto;						
			}
			
			private function selecionaProduto(p:Produto):void{
				txtIdProduto.text = p.id;
				txtProduto.text = p.nome;
				txtOidProduto.text = p.oid.toString();				
			}					
		]]>
	</mx:Script>
</ns1:FieldSet>
