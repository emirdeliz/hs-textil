<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:component="br.com.hs.sistema.view.component.*" 
	width="608" title="Manutenção Funcionário" styleName="formMain" showCloseButton="true" close="{this.fechar()}">	
	<mx:Form width="100%">
		<component:FormItemCustom label="Cod.:" required="true">
			<component:TextInputCustom styleName="small" id="txtId"/>
		</component:FormItemCustom>
		<component:FormItemCustom label="Nome:" required="true">
			<component:TextInputCustom styleName="normal" id="txtNome"/>
		</component:FormItemCustom>		
		<component:FormItemCustom label="Contato:">
			<component:TextInputCustom styleName="normal" id="txtContato"/>
		</component:FormItemCustom>
		<component:FormItemCustom label="E-mail:">
			<component:TextInputCustom styleName="normal" id="txtEmail"/>
		</component:FormItemCustom>
		<component:FormItemCustom label="Usuário:" required="true">
			<component:TextInputCustom styleName="normal" id="txtUsuario"/>
		</component:FormItemCustom>
		<component:FormItemCustom label="Senha:" required="true">
			<component:TextInputCustom styleName="normal" displayAsPassword="true" id="txtSenha"/>
		</component:FormItemCustom>
		<mx:FormItem label="Cargo:" direction="horizontal" required="true" width="100%">
			<component:TextInputCustom styleName="small" id="txtIdCargo" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtCargo" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtOidCargo" includeInLayout="false" visible="false"/>
			<mx:Button styleName="btZoom" click="abrirZoomCargo()"/>
			<mx:Button styleName="btLimpar" click="{Utils.limpaCampos([txtIdCargo, txtCargo, txtOidCargo])}"/>
		</mx:FormItem>
		<mx:FormItem label="Permissão:" direction="horizontal" required="true" width="100%">
			<component:TextInputCustom styleName="small" id="txtIdAcessoSistema" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtAcessoSistema" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtOidAcessoSistema" includeInLayout="false" visible="false"/>
			<mx:Button styleName="btZoom" click="abrirZoomAcessoSistema()"/>
			<mx:Button styleName="btLimpar" click="{Utils.limpaCampos([txtIdAcessoSistema, txtAcessoSistema, txtOidAcessoSistema])}"/>
		</mx:FormItem>
		<mx:FormItem label="Data Admissão:">
			<mx:DateField id="txtDataAdmissao" styleName="small" formatString="DD/MM/YYYY"/>
		</mx:FormItem>			
		<component:FormItemCustom label="Endereço:" required="true" height="50">
			<component:TextAreaCustom id="txtEndereco"/>		
		</component:FormItemCustom>
		<mx:FormItem>
			<mx:CheckBox id="cbxInativo" label="Inativo"/>
		</mx:FormItem>
	</mx:Form>
	<mx:HBox>
		<mx:Button id="btSalvar" styleName="btSalvar" click="salvar()"/>					
		<mx:Button id="btFechar" styleName="btFechar" click="fechar()"/>					
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import com.adobe.crypto.MD5;
			import br.com.hs.model.entity.AcessoSistema;
			import br.com.hs.sistema.view.zoom.ZoomAcessoSistema;
			import br.com.hs.sistema.view.zoom.ZoomCargo;
			import br.com.hs.model.entity.Funcionario;
			import br.com.hs.model.entity.Cargo;			
			import br.com.hs.sistema.view.utils.Utils;
			import mx.containers.Form;			
			import mx.rpc.AbstractOperation;
			import mx.binding.utils.BindingUtils;
			import mx.managers.PopUpManager;			
			import br.com.hs.model.remote.ServiceLocator;
			import mx.rpc.events.ResultEvent;
			import mx.controls.Alert;						
			import mx.rpc.remoting.mxml.RemoteObject;
			
			[Bindable]
			private var item:Funcionario
			
			private var callbackFunction:Function;
			
			public function set entidade(item:Object):void{	
				this.item = item as Funcionario;	
				if(this.item!=null){
					this.txtId.text = this.item.id;
					this.txtNome.text = this.item.nome;
					this.txtContato.text = this.item.contato;
					this.txtEndereco.text = this.item.endereco;
					this.txtEmail.text = this.item.email;
					this.txtDataAdmissao.selectedDate = this.item.dataAdmissao;
					this.txtUsuario.text = this.item.usuario;
					this.txtSenha.text = this.item.senha;
					this.cbxInativo.selected = this.item.inativo;
						
					if(this.item.cargo!=null){
						this.txtCargo.text = this.item.cargo.nome;
						this.txtIdCargo.text = this.item.cargo.id; 
						this.txtOidCargo.text = this.item.cargo.oid.toString(); 
					}
					
					if(this.item.acessoSistema!=null){					
						this.txtAcessoSistema.text = this.item.acessoSistema.nome;
						this.txtIdAcessoSistema.text = this.item.acessoSistema.id; 
						this.txtOidAcessoSistema.text = this.item.acessoSistema.oid.toString(); 
					}
				}								
			}
			
			public function set callback(callbackFunction:Function):void{
				this.callbackFunction = callbackFunction;
			}
			
			public function set formLeitura(leitura:Boolean):void{
				Utils.desabilitar(this, leitura);
				this.btFechar.visible=true;
        		this.btFechar.includeInLayout=true;
			}
					
			private function salvar():void{
				
				if(!Utils.validaCampos([txtId, txtNome, txtEndereco, txtOidCargo, txtOidAcessoSistema])){
					Alert.show("Favor, preencha os campos obrigatórios");
					return;
				}	
				
				if(this.item == null){
					this.item = new Funcionario();									
				}
								
				this.item.id = txtId.text;
				this.item.nome = txtNome.text;				
				this.item.contato =	txtContato.text;	
				this.item.endereco = txtEndereco.text;	
				this.item.email = txtEmail.text;
				this.item.dataAdmissao = txtDataAdmissao.selectedDate;
				this.item.usuario = txtUsuario.text.toLowerCase();
				this.item.senha	= MD5.hash(txtSenha.text.toLowerCase());
			this.item.inativo = cbxInativo.selected;
				var c:Cargo = new Cargo();
				c.oid = Number(txtOidCargo.text);
				this.item.cargo = c;
				
				var a:AcessoSistema = new AcessoSistema();
				a.oid = Number(txtOidAcessoSistema.text); 
				this.item.acessoSistema = a;			
							
				var remoteObject:RemoteObject = ServiceLocator.getFuncionarioService();					
				var operation:AbstractOperation = remoteObject.getOperation("salvar");				
				operation.addEventListener(ResultEvent.RESULT, onResultSalvar);		
				remoteObject.salvar(this.item);
			}
			
			private function onResultSalvar(event:ResultEvent):void{
				Alert.show("Salvo com sucesso");
				callbackFunction();
				fechar();
			}
						
			private function fechar():void{
				PopUpManager.removePopUp(this);
			}
			
			private function abrirZoomCargo():void{
				var frm:ZoomCargo = new ZoomCargo();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);					
				frm.callback = selecionaCargo;						
			}
			
			private function selecionaCargo(c:Cargo):void{
				txtIdCargo.text = c.id;
				txtCargo.text = c.nome;
				txtOidCargo.text = c.oid.toString();
			}
			
			private function abrirZoomAcessoSistema():void{
				var frm:ZoomAcessoSistema = new ZoomAcessoSistema();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);					
				frm.callback = selecionaAcessoSistema;						
			}
			
			private function selecionaAcessoSistema(a:AcessoSistema):void{
				txtIdAcessoSistema.text = a.id;
				txtAcessoSistema.text = a.nome;
				txtOidAcessoSistema.text = a.oid.toString();
			}
		]]>
	</mx:Script>
</mx:TitleWindow>
