<?xml version="1.0" encoding="utf-8"?>
<ns1:FieldSet xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="inicio()" xmlns:ns1="com.jwopitz.containers.*" 
	verticalScrollPolicy="off" title="Fluxo caixa" dropShadowEnabled="true" dropShadowColor="#EAE5E5" shadowDistance="100" shadowDirection="right" fontThickness="100">	
<mx:HBox verticalAlign="middle">	
		<mx:FormItem label="Vencimento:" direction="horizontal" verticalCenter="30">
			<mx:DateField id="txtDataI"/>		
		</mx:FormItem>
		<mx:FormItem label="à" direction="horizontal" verticalCenter="30">		
			<mx:DateField id="txtDataF"/>
		</mx:FormItem>	
		<mx:FormItem label="Tipo:">
			<mx:ComboBox id="cbxTipo">
				<mx:ArrayCollection>
					<mx:Object data="{TipoCaixa.TODOS}" label="Todos"/>
					<mx:Object data="{TipoCaixa.RECEITA}" label="Receita"/>
					<mx:Object data="{TipoCaixa.DESPESA}" label="Despesa"/>
				</mx:ArrayCollection>
			</mx:ComboBox>
		</mx:FormItem>
		<mx:Button click="filtrar()" styleName="btFiltrar"/>
		<mx:Button click="pagar()" styleName="btPagar"/>
	</mx:HBox>	
	<mx:FormItem label="Pesquisar:" width="100%">
		<mx:TextInput width="100%" id="inputSearch" change="{filtraDados()}"/>			
	</mx:FormItem>
	<mx:DataGrid id="grid" width="100%" height="100%">
		<mx:columns>
			<mx:DataGridColumn headerText="Tipo" labelFunction="labelFunctionTipo"/>
			<mx:DataGridColumn headerText="Envolvido" labelFunction="labelFunctionEnvolvido"/>
			<mx:DataGridColumn headerText="Vencimento" labelFunction="labelFunctionData"/>
			<mx:DataGridColumn headerText="Valor" labelFunction="labelFunctionValor"/>
			<mx:DataGridColumn headerText="Pago?" labelFunction="labelFunctionPago"/>
		</mx:columns>
	</mx:DataGrid>		
	<mx:Script>
		<![CDATA[
			import br.com.hs.sistema.view.utils.Utils;
			import br.com.hs.sistema.constant.TipoCaixa;
			import br.com.hs.model.remote.ServiceLocator;
			import br.com.hs.model.entity.Caixa;
			import br.com.hs.sistema.view.utils.Utils;
			import mx.utils.ObjectUtil;
			import br.com.hs.sistema.constant.TipoCaixa;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;					
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.rpc.AbstractOperation;
			import mx.rpc.events.ResultEvent;			
			import mx.rpc.remoting.mxml.RemoteObject;			
									
			private function inicio():void{
				buscarTodos();
			}			
			
			private function buscarTodos():void{
				var remoteObject:RemoteObject = ServiceLocator.getCaixaService();					
				var operation:AbstractOperation = remoteObject.getOperation("buscarTodos");				
				operation.addEventListener(ResultEvent.RESULT, onResultBuscarTodos);		
				remoteObject.buscarTodos();				
			}
			
			private function onResultBuscarTodos(event:ResultEvent):void{				
				this.grid.dataProvider = event.result as ArrayCollection;				
			}
			
			private function filtrar():void{
				var remoteObject:RemoteObject = ServiceLocator.getCaixaService();					
				var operation:AbstractOperation = remoteObject.getOperation("filtroCaixa");				
				operation.addEventListener(ResultEvent.RESULT, onResultBuscarTodos);		
				var tipo:Number = this.cbxTipo.selectedItem.data;				
				remoteObject.filtroCaixa(this.txtDataI.selectedDate, this.txtDataF.selectedDate, (tipo!=TipoCaixa.TODOS?tipo:null));					
			}
			
			private function onResultFiltrar(event:ResultEvent):void{				
				this.grid.dataProvider = event.result as ArrayCollection;				
			}
			
			private function pagar():void{
				var item:Object = grid.selectedItem as Caixa;
				if(item == null){
					Alert.show("Favor, selecione o item a ser pago");
				}else if(item.pagamentoEfetuado){
					Alert.show("Pagamento do item selecionado já foi efetuado, favor selecione outro item para ser pago");				
				}else{					
					Alert.show("Confirmar pagamento?", "", Alert.YES|Alert.NO, this, confirmaPagamento, null, Alert.NO);	
				}
			}
			
			private function confirmaPagamento(event:CloseEvent):void{
				if (event.detail == Alert.YES){
					var item:Caixa = grid.selectedItem as Caixa;
					item.pagamentoEfetuado = true;
					var remoteObject:RemoteObject = ServiceLocator.getCaixaService();					
					var operation:AbstractOperation = remoteObject.getOperation("salvar");				
					operation.addEventListener(ResultEvent.RESULT, onResultPagar);		
					var tipo:Number = this.cbxTipo.selectedItem.data;				
					remoteObject.salvar(item);	
				}		
			}
			
			private function onResultPagar(event:ResultEvent):void{
				Alert.show("Pagamento efetuado com sucesso");
				this.buscarTodos();
			}
									
			private function filterSearch(item:Object):Boolean {
				var isMatch:Boolean = false;				
				
				if(item.tipo != null && item.tipo.toString().toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}			
				if(item.venda != null && item.venda.cliente.nome.toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				} 
				if(item.compra != null && item.compra.fornecedor.nome.toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}   
				if(item.dataVencimento != null && Utils.formatDat(item.dataVencimento).toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}  
				if(item.valor != null && item.valor.toString().toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1 ||
					Utils.formatDec(item.valor.toString()).toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				} 				    
				return isMatch;
			}
			
			private function filtraDados():void {
				if(this.grid.dataProvider==null)
					return;
				this.grid.dataProvider.filterFunction = this.filterSearch; 
				this.grid.dataProvider.refresh();
			}	
			
			private function labelFunctionValor(row:Object, column:DataGridColumn):String{			
				var vFormat:String = Utils.formatDec(row.valor);						
            	return vFormat;
			}
			
			private function labelFunctionData(row:Object, column:DataGridColumn):String{			
				var vFormat:String = Utils.formatDat(row.dataVencimento);						
            	return vFormat;
			}
			
			private function labelFunctionEnvolvido(row:Object, column:DataGridColumn):String{			
				var vEnvolvido:String = row.compra !=null?
										row.compra.fornecedor.nome:row.venda!=null?
										row.venda.cliente.nome:row.despesa.tipoDespesa.nome;						
            	return vEnvolvido;
			}
			
			private function labelFunctionTipo(row:Object, column:DataGridColumn):String{			
				var vEnvolvido:String = row.tipo!=TipoCaixa.RECEITA?"Despesa":"Receita";					
            	return vEnvolvido;
			}
			
			private function labelFunctionPago(row:Object, column:DataGridColumn):String{	
				var vPago:String = row.pagamentoEfetuado?"Sim":"Não";
				return vPago;
			}
			
		]]> 
	</mx:Script>
</ns1:FieldSet>
