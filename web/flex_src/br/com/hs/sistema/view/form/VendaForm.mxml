<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" width="776" xmlns:component="br.com.hs.sistema.view.component.*" 
	title="Manutenção Venda" xmlns:ns2="br.com.thinklab.util.control.*" showCloseButton="true" close="{this.fechar()}" verticalScrollPolicy="off">
	<mx:Form width="100%" height="100%">
		<component:FormItemCustom label="Cliente:" direction="horizontal" required="true">	
			<component:TextInputCustom styleName="small" id="txtIdCliente" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtCliente" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtOidCliente" visible="false" includeInLayout="false"/>
			<mx:Button styleName="btZoom" click="abrirZoomCliente()"/>
			<mx:Button styleName="btLimpar" click="{Utils.limpaCampos([txtIdCliente, txtCliente, txtOidCliente]); this.grid.dataProvider = null}"/>
		</component:FormItemCustom>
		<component:FormItemCustom label="Forma Pagamento:" direction="horizontal" required="true">	
			<component:TextInputCustom styleName="small" id="txtIdFormaPagamento" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtFormaPagamento" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtOidFormaPagamento" visible="false" includeInLayout="false"/>
			<mx:Button styleName="btZoom" click="abrirZoomFormaPagamento()"/>
			<mx:Button styleName="btLimpar" click="{Utils.limpaCampos([txtIdFormaPagamento, txtFormaPagamento, txtOidFormaPagamento]); this.grid.dataProvider = null}"/>
		</component:FormItemCustom>
		<component:FormItemCustom label="Data:">
			<component:TextInputCustom styleName="small" id="txtData" editable="false"/>
		</component:FormItemCustom>
		<component:FormItemCustom label="Representante:" direction="horizontal">	
			<component:TextInputCustom styleName="small" id="txtIdRepresentante" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtRepresentante" editable="false"/>
			<component:TextInputCustom styleName="normal" id="txtOidRepresentante" visible="false" includeInLayout="false"/>
		</component:FormItemCustom>
		<mx:FormItem label="Valor total:">
			<ns2:DecimalInput styleName="small" id="txtValorTotal" text="0,00" currencyFormat="BR" precision="2" maxChars="7" editable="false"/>
		</mx:FormItem>
		<mx:FormItem label="Data vencimento fatura:" required="true">
			<mx:DateField id="txtDataVencimento" formatString="DD/MM/YYYY"/>
		</mx:FormItem>		
		<component:FormItemCustom label="Observação:" height="50">
			<component:TextAreaCustom id="txtObservacao"/>		
		</component:FormItemCustom>
		<component:FormItemCustom label="Produtos:" width="100%" required="true">
			<mx:DataGrid width="100%" id="grid" rowCount="4">
				<mx:columns>
					<mx:DataGridColumn headerText="Produto" dataField="produto.nome" width="6"/>
					<mx:DataGridColumn headerText="Quantidade" dataField="quantidade" width="2"/>	
					<mx:DataGridColumn headerText="Valor unitário" labelFunction="labelFunctionValorUnitario" width="2"/>			
					<mx:DataGridColumn headerText="Valor total" labelFunction="labelFunctionValorTotal" width="2"/>							
				</mx:columns>
			</mx:DataGrid>
			<mx:HBox verticalAlign="middle" width="100%">
				<mx:Button id="btAdicionar" styleName="btNovo" click="adicionarItem()"/>					
				<mx:Button id="btRemover" styleName="btExcluir" click="removerItem()"/>					
			</mx:HBox>
		</component:FormItemCustom>	
	</mx:Form>
	<mx:HBox>
		<mx:Button id="btSalvar" styleName="btSalvar" click="salvar()"/>					
		<mx:Button id="btFechar" styleName="btFechar" click="fechar()"/>					
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import br.com.hs.model.entity.Representante;
			import mx.utils.ObjectUtil;
			import br.com.hs.model.entity.Produto;
			import br.com.hs.sistema.view.zoom.ZoomFormaPagamento;
			import br.com.hs.model.entity.Venda;
			import br.com.hs.model.entity.Cliente;
			import br.com.hs.model.entity.ProdutoVenda;
			import br.com.hs.model.entity.FormaPagamento;
			import br.com.hs.sistema.view.zoom.ZoomCliente;
			import mx.collections.ArrayCollection;		
			import br.com.hs.model.entity.Compra;		
			import br.com.hs.sistema.view.zoom.ZoomTipoDespesa;
			import br.com.hs.sistema.constant.TipoCaixa;
			import br.com.hs.model.entity.Caixa;
			import br.com.hs.model.entity.TipoDespesa;
			import br.com.hs.model.entity.Despesa;
			import br.com.hs.sistema.view.utils.Utils;
			import mx.containers.Form;			
			import mx.rpc.AbstractOperation;
			import mx.binding.utils.BindingUtils;
			import mx.managers.PopUpManager;			
			import br.com.hs.model.remote.ServiceLocator;
			import mx.rpc.events.ResultEvent;
			import mx.controls.Alert;		
			import mx.rpc.remoting.mxml.RemoteObject;
			
			[Bindable]
			private var item:Caixa;
			
			private var callbackFunction:Function;			
			
			public function set entidade(item:Object):void{	
				this.item = item as Caixa;	
				if(this.item!=null){					
					this.txtData.text = Utils.formatDat(this.item.dataCaixa);
					this.txtCliente.text = this.item.venda.cliente.nome;
					this.txtRepresentante.text = this.item.venda.representante.nome;
					this.txtFormaPagamento.text = this.item.formaPagamento.nome;
					this.txtIdCliente.text = this.item.venda.cliente.id;
					this.txtIdFormaPagamento.text = this.item.formaPagamento.id;
					this.txtIdRepresentante.text = this.item.venda.representante.id;
					this.txtOidCliente.text = this.item.venda.cliente.oid.toString();
					this.txtOidFormaPagamento.text = this.item.formaPagamento.oid.toString();
					this.txtOidRepresentante.text = this.item.venda.representante.oid.toString();
					this.grid.dataProvider = this.item.venda.produtos;							
					this.txtValorTotal.text = Utils.formatDec(this.item.valor.toString());
					this.txtDataVencimento.selectedDate = this.item.dataVencimento;	
					this.txtObservacao.text = this.item.observacao;				
				}else{
					this.txtData.text = Utils.formatDat(new Date());
					this.txtOidRepresentante.text = this.parentDocument.usuarioCorrente.oid.toString();
					this.txtRepresentante.text = this.parentDocument.usuarioCorrente.nome;
					this.txtIdRepresentante.text = this.parentDocument.usuarioCorrente.id;
				}							
			}
			
			public function set callback(callbackFunction:Function):void{
				this.callbackFunction = callbackFunction;
			}
			
			public function set formLeitura(leitura:Boolean):void{
				Utils.desabilitar(this, leitura);
				this.btFechar.visible=true;
        		this.btFechar.includeInLayout=true;
			}
						
			private function salvar():void{				
				if(!Utils.validaCampos([txtOidCliente, txtOidFormaPagamento, txtDataVencimento]) || (grid.dataProvider==null||grid.dataProvider.length<=0)){
					Alert.show("Favor, preencha os campos obrigatórios");
					return;
				}	
				
				if(this.item == null){
					this.item = new Caixa();
					this.item.venda = new Venda();
					this.item.venda.produtos = new ArrayCollection();
					this.item.venda.cliente = new Cliente();
					this.item.venda.representante = new Representante();
					this.item.formaPagamento = new FormaPagamento();														
				}			
											
				this.item.venda.produtos = this.grid.dataProvider as ArrayCollection;					
				this.item.formaPagamento.oid = new Number(this.txtOidFormaPagamento.text);  					
				this.item.venda.cliente.oid = new Number(this.txtOidCliente.text);	
				this.item.venda.representante.oid = new Number(txtOidRepresentante.text);						
				this.item.dataVencimento = this.txtDataVencimento.selectedDate;				
				this.item.valor = Utils.parseDec(this.txtValorTotal.decimalText);					
				this.item.dataCaixa = new Date();
				this.item.observacao = this.txtObservacao.text;
				this.item.tipo = TipoCaixa.RECEITA;											
										
				var remoteObject:RemoteObject = ServiceLocator.getVendaService();					
				var operation:AbstractOperation = remoteObject.getOperation("salvar");				
				operation.addEventListener(ResultEvent.RESULT, onResultSalvar);						
				remoteObject.salvar(this.item);				
			}
						
			private function onResultSalvar(event:ResultEvent):void{
				Alert.show("Salvo com sucesso");				
				fechar();
			}
									
			private function abrirZoomCliente():void{
				var frm:ZoomCliente = new ZoomCliente();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);					
			    frm.callback = selecionaCliente;						
			}
			
			private function selecionaCliente(c:Cliente):void{
				txtIdCliente.text = c.id;
				txtCliente.text = c.nome;
				txtOidCliente.text = c.oid.toString();				
			}
			
			private function abrirZoomFormaPagamento():void{
				var frm:ZoomFormaPagamento = new ZoomFormaPagamento();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);					
			    frm.callback = selecionaFormaPagamento;						
			}
			
			private function selecionaFormaPagamento(c:FormaPagamento):void{
				txtIdFormaPagamento.text = c.id;
				txtFormaPagamento.text = c.nome;
				txtOidFormaPagamento.text = c.oid.toString();			
			}
			
			private function adicionarItem():void{							
				var frm:ItemProduto = new ItemProduto();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);					
				frm.callback = atualizaProduto;										
			}
			
			private function atualizaProduto(m:ProdutoVenda):void{
				if(this.grid.dataProvider==null)
					this.grid.dataProvider = new ArrayCollection();				
						
				if(this.validaItemAdicionado(m.produto)){				
					(this.grid.dataProvider as ArrayCollection).addItem(m);
				}
				this.atualizaValorTotal();
			}
			
			private function validaItemAdicionado(item:Object):Boolean{
				for each(var o:Object in this.grid.dataProvider){
					if(item.oid == o.produto.oid){
						Alert.show("Item já foi adicionado a lista, favor selecionar outro item.");
						return false;
					}
				}
				return true;
			}
			
			private function removerItem():void{
				if(this.grid.selectedItem == null){
					Alert.show("Selecione o item a ser removido");
				}else{
					(this.grid.dataProvider as ArrayCollection).removeItemAt(this.grid.selectedIndex);
					atualizaValorTotal();
				}
			}
			
			private function atualizaValorTotal():void{
				var vTotal:Number = 0;
				for each(var p:ProdutoVenda in grid.dataProvider){
					vTotal+=p.valorTotal;
				}
				this.txtValorTotal.text = Utils.formatDec(vTotal.toString());
			}
						
			private function fechar():void{
				PopUpManager.removePopUp(this);
				if(callbackFunction!=null){
					callbackFunction();
				}
			}
			
			private function labelFunctionValorUnitario(row:Object, column:DataGridColumn):String{			
				var vFormat:String = Utils.formatDec(row.valorUnitario);						
            	return vFormat;
			}	
			private function labelFunctionValorTotal(row:Object, column:DataGridColumn):String{			
				var vFormat:String = Utils.formatDec(row.valorTotal);						
            	return vFormat;
			}		
		]]>
	</mx:Script>
</mx:TitleWindow>
