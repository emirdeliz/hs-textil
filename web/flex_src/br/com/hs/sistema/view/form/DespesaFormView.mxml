<?xml version="1.0" encoding="utf-8"?>
<ns1:FieldSet xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"  verticalScrollPolicy="off" 
	creationComplete="inicio()" xmlns:ns1="com.jwopitz.containers.*" title="Despesas" dropShadowEnabled="true" dropShadowColor="#EAE5E5" shadowDistance="100" shadowDirection="right" fontThickness="100">
	<mx:FormItem label="Pesquisar:" width="100%">
		<mx:TextInput width="100%" id="inputSearch" change="{filtraDados()}"/>			
	</mx:FormItem>
	<mx:DataGrid id="grid" width="100%" height="100%" doubleClick="{this.grid.selectedItem!=null? abrirFormManutencao(grid.selectedItem, true): '';}" doubleClickEnabled="true" variableRowHeight="true">
		<mx:columns>
			<mx:DataGridColumn headerText="Despesa" dataField="despesa.tipoDespesa.nome" wordWrap="true" width="2"/>
			<mx:DataGridColumn headerText="Valor" labelFunction="labelFunctionValor" wordWrap="true" width="4"/>		
			<mx:DataGridColumn headerText="Observação " dataField="despesa.observacao" wordWrap="true" width="6"/>
			<mx:DataGridColumn headerText="Data Vencimento" labelFunction="labelFunctionData" wordWrap="true" width="4"/>				
		</mx:columns>
	</mx:DataGrid>
	<mx:HBox width="100%" verticalAlign="middle">
		<mx:Button styleName="btNovo" click="novo()"/>					
		<mx:Button styleName="btEdit" click="editar()"/>
		<mx:Button styleName="btExcluir" click="excluir()"/>		
	</mx:HBox>		
	<mx:Script>
		<![CDATA[
			import mx.utils.ObjectUtil;
			import br.com.hs.sistema.view.utils.Utils;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import br.com.hs.model.remote.ServiceLocator;			
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.rpc.AbstractOperation;
			import mx.rpc.events.ResultEvent;			
			import mx.rpc.remoting.mxml.RemoteObject;			
									
			private function inicio():void{
				buscarTodos();
			}			
			
			private function buscarTodos():void{
				var remoteObject:RemoteObject = ServiceLocator.getDespesaService();					
				var operation:AbstractOperation = remoteObject.getOperation("buscarTodos");				
				operation.addEventListener(ResultEvent.RESULT, onResultBuscarTodos);		
				remoteObject.buscarTodos();				
			}
			
			private function onResultBuscarTodos(event:ResultEvent):void{				
				this.grid.dataProvider = event.result as ArrayCollection;				
			}
			
			private function editar():void{
				var item:Object = grid.selectedItem;
				if(item == null){
					Alert.show("Favor, selecione o item a ser editado");
				}else{
					 abrirFormManutencao(item, false);
				}
			}
			
			private function abrirFormManutencao(item:Object, leitura:Boolean):void{						
				var frm:DespesaForm = new DespesaForm();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);
				frm.entidade = item;	
				frm.callback = buscarTodos;		
				frm.formLeitura = leitura;					
			}
			
			private function novo():void{
				abrirFormManutencao(null, false);
			}
			
			private function excluir():void{
				var item:Object = grid.selectedItem;
				if(item == null){
					Alert.show("Favor, selecione o item a ser excluído");
				}else{
					Alert.show("Confirmar exclusão?", "", Alert.YES|Alert.NO, this, confirmaExluir, null, Alert.NO);				
				}				
			}
			
			private function confirmaExluir(event:CloseEvent):void{
				if (event.detail == Alert.YES){
					var remoteObject:RemoteObject = ServiceLocator.getDespesaService();				
					var operation:AbstractOperation = remoteObject.getOperation("deletar");				
					operation.addEventListener(ResultEvent.RESULT, onResultExcluir);		
					remoteObject.deletar(this.grid.selectedItem);
				}
			}
			
			private function onResultExcluir(event:ResultEvent):void{
				Alert.show("Exclusão efetuada com sucesso.");
				buscarTodos();
			}
						
			private function filterSearch(item:Object):Boolean {
				var isMatch:Boolean = false;				
			
				if(item.valor != null && item.valor.toString().toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1 ||
					Utils.formatDec(item.valor.toString()).toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				} 			
				if(item.despesa.tipoDespesa.nome != null && item.despesa.tipoDespesa.nome.toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}   
				if(item.despesa.descricao != null && item.despesa.descricao.toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}          
				if(item.dataVencimento != null && Utils.formatDat(item.dataVencimento).toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}   
				return isMatch;
			}
			
			private function filtraDados():void {
				if(this.grid.dataProvider==null)
					return;
				this.grid.dataProvider.filterFunction = this.filterSearch; 
				this.grid.dataProvider.refresh();
			}
			
			private function labelFunctionValor(row:Object, column:DataGridColumn):String{			
				var vFormat:String = Utils.formatDec(row.valor.toString());						
            	return vFormat;
			}
			
			private function labelFunctionData(row:Object, column:DataGridColumn):String{			
				var vFormat:String = Utils.formatDat(row.dataVencimento);						
            	return vFormat;
			}	
			
		]]>
	</mx:Script>
</ns1:FieldSet>
