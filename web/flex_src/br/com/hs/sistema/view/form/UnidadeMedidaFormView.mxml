<?xml version="1.0" encoding="utf-8"?>
<ns1:FieldSet xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="inicio()" xmlns:ns1="com.jwopitz.containers.*" 
	verticalScrollPolicy="off" title="Unidades medida" dropShadowEnabled="true" dropShadowColor="#EAE5E5" shadowDistance="100" shadowDirection="right" fontThickness="100">
	<mx:FormItem label="Pesquisar:" width="100%" direction="horizontal">
		<mx:TextInput width="100%" id="inputSearch" change="{filtraDados()}"/>	
			<mx:CheckBox label="Mostrar Inativos" id="cbxMostrarInativos" change="buscarTodos()" selected="false"/>				
	</mx:FormItem>
	<mx:DataGrid id="grid" width="100%" height="100%" doubleClick="{this.grid.selectedItem!=null? abrirFormManutencao(grid.selectedItem, true): '';}" doubleClickEnabled="true" variableRowHeight="true">
		<mx:columns>
			<mx:DataGridColumn headerText="Cod." dataField="id" wordWrap="true" width="2"/>
			<mx:DataGridColumn headerText="Nome" dataField="nome" wordWrap="true" width="4"/>		
			<mx:DataGridColumn headerText="Descrição" dataField="descricao" wordWrap="true" width="6"/>		
			<mx:DataGridColumn headerText="Ativo?" labelFunction="labelFunctionAtivo" wordWrap="true" width="2"/>					
		</mx:columns>
	</mx:DataGrid>
	<mx:HBox width="100%" verticalAlign="middle">
		<mx:Button styleName="btNovo" click="novo()"/>					
		<mx:Button styleName="btEdit" click="editar()"/>
		<mx:Button styleName="btExcluir" click="excluir()"/>		
	</mx:HBox>		
	<mx:Script>
		<![CDATA[
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import br.com.hs.model.remote.ServiceLocator;			
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.rpc.AbstractOperation;
			import mx.rpc.events.ResultEvent;			
			import mx.rpc.remoting.mxml.RemoteObject;			
									
			private function inicio():void{
				buscarTodos();
			}			
			
			private function buscarTodos():void{
				var remoteObject:RemoteObject = ServiceLocator.getUnidadeMedidaService();					
				var operation:AbstractOperation;
				if(cbxMostrarInativos.selected){			
					operation = remoteObject.getOperation("buscarTodos");				
					operation.addEventListener(ResultEvent.RESULT, onResultBuscarTodos);		
					remoteObject.buscarTodos();		
				}else{
					operation = remoteObject.getOperation("buscarTodosAtivos");				
					operation.addEventListener(ResultEvent.RESULT, onResultBuscarTodos);		
					remoteObject.buscarTodosAtivos();	
				}					
			}
			
			private function onResultBuscarTodos(event:ResultEvent):void{
				this.grid.dataProvider = event.result as ArrayCollection;				
			}
			
			private function editar():void{
				var item:Object = grid.selectedItem;
				if(item == null){
					Alert.show("Favor, selecione o item a ser editado");
				}else{
					 abrirFormManutencao(item, false);
				}
			}
			
			private function abrirFormManutencao(item:Object, leitura:Boolean):void{						
				var frm:UnidadeMedidaForm = new UnidadeMedidaForm();
				PopUpManager.addPopUp(frm, this, true);
				PopUpManager.centerPopUp(frm);
				frm.entidade = item;	
				frm.callback = buscarTodos;		
				frm.formLeitura = leitura;					
			}
			
			private function novo():void{
				abrirFormManutencao(null, false);
			}
			
			private function excluir():void{
				var item:Object = grid.selectedItem;
				if(item == null){
					Alert.show("Favor, selecione o item a ser excluído");
				}else{
					Alert.show("Confirmar exclusão?", "", Alert.YES|Alert.NO, this, confirmaExluir, null, Alert.NO);				
				}				
			}
			
			private function confirmaExluir(event:CloseEvent):void{
				if (event.detail == Alert.YES){
					var remoteObject:RemoteObject = ServiceLocator.getUnidadeMedidaService();				
					var operation:AbstractOperation = remoteObject.getOperation("deletar");				
					operation.addEventListener(ResultEvent.RESULT, onResultExcluir);		
					remoteObject.deletar(this.grid.selectedItem);
				}
			}
			
			private function onResultExcluir(event:ResultEvent):void{
				Alert.show("Exclusão efetuada com sucesso.");
				buscarTodos();
			}
						
			private function filterSearch(item:Object):Boolean {
				var isMatch:Boolean = false;				
			
				if(item.id != null && item.id.toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}			
				if(item.nome != null && item.nome.toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}   
				if(item.descricao != null && item.descricao.toLowerCase().search(this.inputSearch.text.toLowerCase()) != -1){
					isMatch = true
				}            
				return isMatch;
			}
			
			private function filtraDados():void {
				if(this.grid.dataProvider==null)
					return;
				this.grid.dataProvider.filterFunction = this.filterSearch; 
				this.grid.dataProvider.refresh();
			}	
			
			private function labelFunctionAtivo(row:Object, column:DataGridColumn):String{			
				var vAtivo:String = row.inativo!=true?"Sim":"Não";					
            	return vAtivo;
			}
			
		]]>
	</mx:Script>
</ns1:FieldSet>
